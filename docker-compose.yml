version: '2.4'

services:
  mongo:
    image: mongo:3.4-jessie
    ports:
      - 27017:27017
    expose:
      - 27017
    container_name: mongo
    network_mode: "host"
    hostname: 127.0.0.1
    volumes:
      - /home/mongo/data:/var/lib/mongo

  mysql:
    image: mysql:5.7
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=userDB
    container_name: mysql
    network_mode: host
    hostname: 0.0.0.0
    volumes:
      - /DB/mysql:/var/lib/mysql
#
#  mysql:
#    image: mysql:5.7
#    restart: always
#    container_name: mysql
#    network_mode: 0.0.0.0
#    hostname: localhost
#    environment:
#      MYSQL_ROOT_PASSWORD: root123
#      MYSQL_DATABASE: userDB
#      MYSQL_PASSWORD: root123
#      MYSQL_USER: root
#    ports:
#      - 3306:3306
#    volumes:
#      - /DB/mysql:/var/lib/mysql


  eureka-server:
    build: eureka-server/
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8761:8761


  config-service:
    build: config-server/
    restart: always
    network_mode: "host"
    image: demo-config-service
    hostname: localhost
    ports:
      - 8888:8888


  zuul-apigateway:
    build: zuul-api/
    depends_on:
      - config-service
      - eureka-server
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8081:8081

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - 2181:2181
    network_mode: "host"
    hostname: localhost
    healthcheck:
      test: "exit 0"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    restart: always
    ports:
      - 9092:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    network_mode: "host"
    hostname: localhost
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_CREATE_TOPICS: "new_query:1:1, test:1:1"
    healthcheck:
      test: "exit 0"

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - 8086:8086
    volumes:
      - /opt/appdata/influxdb:/var/lib/influxdb
    restart:
      always



  neo4j:
    image: neo4j:3.5
    ports:
      - 7474:7474
      - 7687:7687
    expose:
      - 7474
    container_name: neo4j_docker
    network_mode: "host"
    hostname: localhost
    restart: always
    volumes:
      - /neo4j/data:/data
      - ./neo4j/import:/import
    environment:
      - NEO4J_AUTH=none

  manual-answer:
    build: manual-answer-service/
    restart: always
    network_mode: "host"
    image: manual-answer-service
    hostname: localhost
    ports:
      - 8091:8091


  user-service:
    build: user-service/
    restart: always
    network_mode: "host"
    image: user-service
    hostname: localhost
    ports:
      - 8081:8081


  oraclefrontend:
    image: oracle-frontend
    build: oracle-frontend/
    container_name: oracle-frontend
    network_mode: "host"
    hostname: localhost
    restart: always


  bot-service:
    build: bot-service/
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8090:8090



  queryautocorrector-service:
    build: queryautocorrector-service/
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8595:8595


  graph-query-service:
    build: graph-query-service/
    image: graph-query-service
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8082:8082


  extract-intent-service:
    build: extract-intent-service/
    image: extract-intent-service
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8383:8383

  timeseries-conversation-service:
    build: timeseries-conversation-service/
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 9000:9000


  prometheus:
    image: prom/prometheus:v2.9.1
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    restart: on-failure
    expose:
      - 9090
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - 9090:9090
    hostname: localhost
    network_mode: "host"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
       - "3000:3000"
    depends_on:
       - prometheus
    network_mode: "host"
    hostname: localhost
